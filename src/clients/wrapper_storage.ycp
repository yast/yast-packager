/**
 * Module:		wrapper_storage.ycp
 *
 * Authors:		Ladislav Slezak <lslezak@novell.com>
 *
 * Purpose:		A wrapper for Storage:: module, required for removing yast2-storage dependency
 *
 * $Id$
 */

{
    string func  = (string)WFM::Args(0);
    list   param = [];

    // get parameters if available
    if (size(WFM::Args()) >= 2)
    {
	param = (list) WFM::Args(1);
    }

    any ret = nil;

    y2milestone("Storage:: wrapper: func: %1, args: %2", func, param);

    import "Storage";

    // call the required function
    if (func == "GetTargetMap")
    {
	ret = Storage::GetTargetMap();
    }
    else if (func == "GetTargetChangeTime")
    {
	ret = Storage::GetTargetChangeTime();
    }
    else if (func == "RemoveDmMapsTo")
    {
	if (size(param) == 0)
	{
	    y2error("Missing argument for Storage::RemoveDmMapsTo()");
	}
	else
	{
	    string param1 = (string)param[0]:nil;

	    ret = Storage::RemoveDmMapsTo(param1);
	}
    }
    else if (func == "GetWinPrimPartitions")
    {
        if (size(param) == 0)
        {
            y2error("Missing argument for Storage::GetWinPrimPartitions()");
        }
        else
        {
            map<string,map> param1 = (map<string,map>)param[0]:nil;
            ret = Storage::GetWinPrimPartitions (param1);
        }
    }
    else
    {
	// the required function is not known
	y2error("unknown function: %1", func);
    }

    y2milestone("Storage wrapper: result: %1", ret);

    return ret;
}
